---
apiVersion: v1
kind: Namespace
metadata:
  name: myapp

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: myapp
data:
  logstash.yml: |
    xpack.monitoring.enabled: false
    
  pipelines.yml: |
    - pipeline.id: main
      path.config: "/usr/share/logstash/pipeline/logstash.conf"
      
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      tcp {
        port => 5000
      }
    }
    
    output {
      # Comment out or modify elasticsearch output if not using
      # elasticsearch {
      #   hosts => ["elasticsearch-service:9200"]
      # }
      
      # For testing, we'll use stdout
      stdout {
        codec => rubydebug
      }
    }
    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:7.12.0
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 5000
          name: tcp
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        resources:
          requests:
            cpu: "200m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/config
        - name: logstash-pipeline
          mountPath: /usr/share/logstash/pipeline
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
          items:
            - key: logstash.yml
              path: logstash.yml
            - key: pipelines.yml
              path: pipelines.yml
      - name: logstash-pipeline
        configMap:
          name: logstash-config
          items:
            - key: logstash.conf
              path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: myapp
spec:
  selector:
    app: logstash
  ports:
    - name: beats
      port: 5044
      targetPort: 5044
    - name: tcp
      port: 5000
      targetPort: 5000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: localhost:30400/api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: docker

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: myapp
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-one
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-one
  template:
    metadata:
      labels:
        app: service-one
    spec:
      containers:
      - name: service-one
        image: localhost:30400/service-one:latest
        ports:
        - containerPort: 8082
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: docker

---
apiVersion: v1
kind: Service
metadata:
  name: service-one
  namespace: myapp
spec:
  selector:
    app: service-one
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: service-one-db
  namespace: myapp
spec:
  serviceName: "service-one-db"
  replicas: 1
  selector:
    matchLabels:
      app: service-one-db
  template:
    metadata:
      labels:
        app: service-one-db
    spec:
      containers:
      - name: service-one-db
        image: mongo:3.7
        ports:
        - containerPort: 27017
        env:
        - name: MONGODB_USER
          value: service-one
        - name: MONGODB_PASS
          value: service-one
        - name: MONGO_DATA_DIR
          value: /data/db
        - name: MONGO_LOG_DIR
          value: /dev/null
        command: ["mongod", "--bind_ip_all"]
        volumeMounts:
        - name: mongodata
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodata
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: service-one-db
  namespace: myapp
spec:
  selector:
    app: service-one-db
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-two
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-two
  template:
    metadata:
      labels:
        app: service-two
    spec:
      containers:
      - name: service-two
        image: localhost:30400/service-two:latest
        ports:
        - containerPort: 8084
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: docker

---
apiVersion: v1
kind: Service
metadata:
  name: service-two
  namespace: myapp
spec:
  selector:
    app: service-two
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 8084

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: service-two-db
  namespace: myapp
spec:
  serviceName: "service-two-db"
  replicas: 1
  selector:
    matchLabels:
      app: service-two-db
  template:
    metadata:
      labels:
        app: service-two-db
    spec:
      containers:
      - name: service-two-db
        image: mysql/mysql-server:latest
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root123
        - name: MYSQL_DATABASE
          value: service-two
        - name: MYSQL_USER
          value: service-two
        - name: MYSQL_PASSWORD
          value: service-two
        volumeMounts:
        - name: mysqldata
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysqldata
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: service-two-db
  namespace: myapp
spec:
  selector:
    app: service-two-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-application
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-application
  template:
    metadata:
      labels:
        app: web-application
    spec:
      containers:
      - name: web-application
        image: localhost:30400/web-application:latest
        ports:
        - containerPort: 4200

---
apiVersion: v1
kind: Service
metadata:
  name: web-application
  namespace: myapp
spec:
  selector:
    app: web-application
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4200

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq  
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbit
  template:
    metadata:
      labels:
        app: rabbit
    spec:
      containers:
      - name: rabbit
        image: rabbitmq:3.8-management-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: CLUSTERED
          value: "true"
        - name: RAM_NODE
          value: "true"
        - name: RABBITMQ_DEFAULT_USER
          value: docker
        - name: RABBITMQ_DEFAULT_PASS
          value: docker
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: myapp
spec:
  selector:
    app: rabbit
  ports:
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: management
      protocol: TCP
      port: 15672
      targetPort: 15672

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul
  template:
    metadata:
      labels:
        app: consul
    spec:
      containers:
      - name: consul
        image: consul:1.7.3
        ports:
        - containerPort: 8500
        - containerPort: 8600
        command:
        - consul
        - agent
        - -server
        - -client=0.0.0.0
        - -ui
        - -bootstrap-expect=1
        - -data-dir=/consul/data
        - -datacenter=blr
        volumeMounts:
        - name: consuldata
          mountPath: /consul/data
      volumes:
      - name: consuldata
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: consul
  namespace: myapp
spec:
  selector:
    app: consul
  ports:
    - name: http
      protocol: TCP
      port: 8500
      targetPort: 8500
    - name: dns
      protocol: TCP
      port: 8600
      targetPort: 8600

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: myapp
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port: 
              number: 8080
              
      # - path: /service-one
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: service-one
      #       port: 
      #         number: 8082
              
      # - path: /service-two
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: service-two
      #       port: 
      #         number: 8084
              
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-application
            port: 
              number: 80